// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: bifrostpb/bifrost.proto

package bifrostpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewType   string `protobuf:"bytes,1,opt,name=ViewType,proto3" json:"ViewType,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=ServerName,proto3" json:"ServerName,omitempty"`
	Token      string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ViewRequest) Reset() {
	*x = ViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewRequest) ProtoMessage() {}

func (x *ViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewRequest.ProtoReflect.Descriptor instead.
func (*ViewRequest) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{0}
}

func (x *ViewRequest) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *ViewRequest) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ViewRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateType string `protobuf:"bytes,1,opt,name=UpdateType,proto3" json:"UpdateType,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=ServerName,proto3" json:"ServerName,omitempty"`
	Token      string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	Data       []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateRequest) GetUpdateType() string {
	if x != nil {
		return x.UpdateType
	}
	return ""
}

func (x *UpdateRequest) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *UpdateRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UpdateRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchType   string `protobuf:"bytes,1,opt,name=WatchType,proto3" json:"WatchType,omitempty"`
	ServerName  string `protobuf:"bytes,2,opt,name=ServerName,proto3" json:"ServerName,omitempty"`
	Token       string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	WatchObject string `protobuf:"bytes,4,opt,name=WatchObject,proto3" json:"WatchObject,omitempty"`
}

func (x *WatchRequest) Reset() {
	*x = WatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequest) ProtoMessage() {}

func (x *WatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequest.ProtoReflect.Descriptor instead.
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{2}
}

func (x *WatchRequest) GetWatchType() string {
	if x != nil {
		return x.WatchType
	}
	return ""
}

func (x *WatchRequest) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *WatchRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WatchRequest) GetWatchObject() string {
	if x != nil {
		return x.WatchObject
	}
	return ""
}

type BytesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret []byte `protobuf:"bytes,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *BytesResponse) Reset() {
	*x = BytesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesResponse) ProtoMessage() {}

func (x *BytesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesResponse.ProtoReflect.Descriptor instead.
func (*BytesResponse) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{3}
}

func (x *BytesResponse) GetRet() []byte {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *BytesResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{4}
}

func (x *ErrorResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

var File_bifrostpb_bifrost_proto protoreflect.FileDescriptor

var file_bifrostpb_bifrost_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x62, 0x69, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x69, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x70, 0x62, 0x22, 0x5f, 0x0a, 0x0b, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x84, 0x01, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x33, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x22, 0x21, 0x0a, 0x0d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x32,
	0x4b, 0x0a, 0x0b, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x16, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x32, 0x51, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x32,
	0x50, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x1d, 0x5a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bifrostpb_bifrost_proto_rawDescOnce sync.Once
	file_bifrostpb_bifrost_proto_rawDescData = file_bifrostpb_bifrost_proto_rawDesc
)

func file_bifrostpb_bifrost_proto_rawDescGZIP() []byte {
	file_bifrostpb_bifrost_proto_rawDescOnce.Do(func() {
		file_bifrostpb_bifrost_proto_rawDescData = protoimpl.X.CompressGZIP(file_bifrostpb_bifrost_proto_rawDescData)
	})
	return file_bifrostpb_bifrost_proto_rawDescData
}

var file_bifrostpb_bifrost_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_bifrostpb_bifrost_proto_goTypes = []interface{}{
	(*ViewRequest)(nil),   // 0: bifrostpb.ViewRequest
	(*UpdateRequest)(nil), // 1: bifrostpb.UpdateRequest
	(*WatchRequest)(nil),  // 2: bifrostpb.WatchRequest
	(*BytesResponse)(nil), // 3: bifrostpb.BytesResponse
	(*ErrorResponse)(nil), // 4: bifrostpb.ErrorResponse
}
var file_bifrostpb_bifrost_proto_depIdxs = []int32{
	0, // 0: bifrostpb.ViewService.View:input_type -> bifrostpb.ViewRequest
	1, // 1: bifrostpb.UpdateService.Update:input_type -> bifrostpb.UpdateRequest
	2, // 2: bifrostpb.WatchService.Watch:input_type -> bifrostpb.WatchRequest
	3, // 3: bifrostpb.ViewService.View:output_type -> bifrostpb.BytesResponse
	4, // 4: bifrostpb.UpdateService.Update:output_type -> bifrostpb.ErrorResponse
	3, // 5: bifrostpb.WatchService.Watch:output_type -> bifrostpb.BytesResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bifrostpb_bifrost_proto_init() }
func file_bifrostpb_bifrost_proto_init() {
	if File_bifrostpb_bifrost_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bifrostpb_bifrost_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bifrostpb_bifrost_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_bifrostpb_bifrost_proto_goTypes,
		DependencyIndexes: file_bifrostpb_bifrost_proto_depIdxs,
		MessageInfos:      file_bifrostpb_bifrost_proto_msgTypes,
	}.Build()
	File_bifrostpb_bifrost_proto = out.File
	file_bifrostpb_bifrost_proto_rawDesc = nil
	file_bifrostpb_bifrost_proto_goTypes = nil
	file_bifrostpb_bifrost_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ViewServiceClient interface {
	View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (ViewService_ViewClient, error)
}

type viewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewServiceClient(cc grpc.ClientConnInterface) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) View(ctx context.Context, in *ViewRequest, opts ...grpc.CallOption) (ViewService_ViewClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ViewService_serviceDesc.Streams[0], "/bifrostpb.ViewService/View", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewServiceViewClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ViewService_ViewClient interface {
	Recv() (*BytesResponse, error)
	grpc.ClientStream
}

type viewServiceViewClient struct {
	grpc.ClientStream
}

func (x *viewServiceViewClient) Recv() (*BytesResponse, error) {
	m := new(BytesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ViewServiceServer is the server API for ViewService service.
type ViewServiceServer interface {
	View(*ViewRequest, ViewService_ViewServer) error
}

// UnimplementedViewServiceServer can be embedded to have forward compatible implementations.
type UnimplementedViewServiceServer struct {
}

func (*UnimplementedViewServiceServer) View(*ViewRequest, ViewService_ViewServer) error {
	return status.Errorf(codes.Unimplemented, "method View not implemented")
}

func RegisterViewServiceServer(s *grpc.Server, srv ViewServiceServer) {
	s.RegisterService(&_ViewService_serviceDesc, srv)
}

func _ViewService_View_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ViewRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).View(m, &viewServiceViewServer{stream})
}

type ViewService_ViewServer interface {
	Send(*BytesResponse) error
	grpc.ServerStream
}

type viewServiceViewServer struct {
	grpc.ServerStream
}

func (x *viewServiceViewServer) Send(m *BytesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ViewService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bifrostpb.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "View",
			Handler:       _ViewService_View_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bifrostpb/bifrost.proto",
}

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateServiceClient interface {
	Update(ctx context.Context, opts ...grpc.CallOption) (UpdateService_UpdateClient, error)
}

type updateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServiceClient(cc grpc.ClientConnInterface) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (UpdateService_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UpdateService_serviceDesc.Streams[0], "/bifrostpb.UpdateService/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &updateServiceUpdateClient{stream}
	return x, nil
}

type UpdateService_UpdateClient interface {
	Send(*UpdateRequest) error
	CloseAndRecv() (*ErrorResponse, error)
	grpc.ClientStream
}

type updateServiceUpdateClient struct {
	grpc.ClientStream
}

func (x *updateServiceUpdateClient) Send(m *UpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *updateServiceUpdateClient) CloseAndRecv() (*ErrorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ErrorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateServiceServer is the server API for UpdateService service.
type UpdateServiceServer interface {
	Update(UpdateService_UpdateServer) error
}

// UnimplementedUpdateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateServiceServer struct {
}

func (*UnimplementedUpdateServiceServer) Update(UpdateService_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterUpdateServiceServer(s *grpc.Server, srv UpdateServiceServer) {
	s.RegisterService(&_UpdateService_serviceDesc, srv)
}

func _UpdateService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpdateServiceServer).Update(&updateServiceUpdateServer{stream})
}

type UpdateService_UpdateServer interface {
	SendAndClose(*ErrorResponse) error
	Recv() (*UpdateRequest, error)
	grpc.ServerStream
}

type updateServiceUpdateServer struct {
	grpc.ServerStream
}

func (x *updateServiceUpdateServer) SendAndClose(m *ErrorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *updateServiceUpdateServer) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UpdateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bifrostpb.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _UpdateService_Update_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "bifrostpb/bifrost.proto",
}

// WatchServiceClient is the client API for WatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchServiceClient interface {
	Watch(ctx context.Context, opts ...grpc.CallOption) (WatchService_WatchClient, error)
}

type watchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchServiceClient(cc grpc.ClientConnInterface) WatchServiceClient {
	return &watchServiceClient{cc}
}

func (c *watchServiceClient) Watch(ctx context.Context, opts ...grpc.CallOption) (WatchService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WatchService_serviceDesc.Streams[0], "/bifrostpb.WatchService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchServiceWatchClient{stream}
	return x, nil
}

type WatchService_WatchClient interface {
	Send(*WatchRequest) error
	Recv() (*BytesResponse, error)
	grpc.ClientStream
}

type watchServiceWatchClient struct {
	grpc.ClientStream
}

func (x *watchServiceWatchClient) Send(m *WatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *watchServiceWatchClient) Recv() (*BytesResponse, error) {
	m := new(BytesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WatchServiceServer is the server API for WatchService service.
type WatchServiceServer interface {
	Watch(WatchService_WatchServer) error
}

// UnimplementedWatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWatchServiceServer struct {
}

func (*UnimplementedWatchServiceServer) Watch(WatchService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterWatchServiceServer(s *grpc.Server, srv WatchServiceServer) {
	s.RegisterService(&_WatchService_serviceDesc, srv)
}

func _WatchService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WatchServiceServer).Watch(&watchServiceWatchServer{stream})
}

type WatchService_WatchServer interface {
	Send(*BytesResponse) error
	Recv() (*WatchRequest, error)
	grpc.ServerStream
}

type watchServiceWatchServer struct {
	grpc.ServerStream
}

func (x *watchServiceWatchServer) Send(m *BytesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *watchServiceWatchServer) Recv() (*WatchRequest, error) {
	m := new(WatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _WatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bifrostpb.WatchService",
	HandlerType: (*WatchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _WatchService_Watch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bifrostpb/bifrost.proto",
}
