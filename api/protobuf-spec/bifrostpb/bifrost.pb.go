// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: bifrostpb/bifrost.proto

package bifrostpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	SvrName string `protobuf:"bytes,2,opt,name=SvrName,proto3" json:"SvrName,omitempty"`
}

func (x *OperateRequest) Reset() {
	*x = OperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateRequest) ProtoMessage() {}

func (x *OperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateRequest.ProtoReflect.Descriptor instead.
func (*OperateRequest) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{0}
}

func (x *OperateRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OperateRequest) GetSvrName() string {
	if x != nil {
		return x.SvrName
	}
	return ""
}

type OperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret []byte `protobuf:"bytes,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *OperateResponse) Reset() {
	*x = OperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateResponse) ProtoMessage() {}

func (x *OperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateResponse.ProtoReflect.Descriptor instead.
func (*OperateResponse) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{1}
}

func (x *OperateResponse) GetRet() []byte {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *OperateResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string  `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	SvrName string  `protobuf:"bytes,2,opt,name=SvrName,proto3" json:"SvrName,omitempty"`
	Req     *Config `protobuf:"bytes,3,opt,name=Req,proto3" json:"Req,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfigRequest) GetSvrName() string {
	if x != nil {
		return x.SvrName
	}
	return ""
}

func (x *ConfigRequest) GetReq() *Config {
	if x != nil {
		return x.Req
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *Config `protobuf:"bytes,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
	Err string  `protobuf:"bytes,3,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigResponse) GetRet() *Config {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *ConfigResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JData []byte `protobuf:"bytes,1,opt,name=JData,proto3" json:"JData,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{4}
}

func (x *Config) GetJData() []byte {
	if x != nil {
		return x.JData
	}
	return nil
}

var File_bifrostpb_bifrost_proto protoreflect.FileDescriptor

var file_bifrostpb_bifrost_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x62, 0x69, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x69, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x70, 0x62, 0x22, 0x40, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x76, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53,
	0x76, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x22, 0x64, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x76, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x76, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x52, 0x65, 0x71, 0x22, 0x47, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x22, 0x1e, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x4a, 0x44, 0x61, 0x74, 0x61, 0x32, 0xfc, 0x02, 0x0a,
	0x0e, 0x42, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e,
	0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x48, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x69, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x69,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x69,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x1d, 0x5a, 0x1b, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63,
	0x2f, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bifrostpb_bifrost_proto_rawDescOnce sync.Once
	file_bifrostpb_bifrost_proto_rawDescData = file_bifrostpb_bifrost_proto_rawDesc
)

func file_bifrostpb_bifrost_proto_rawDescGZIP() []byte {
	file_bifrostpb_bifrost_proto_rawDescOnce.Do(func() {
		file_bifrostpb_bifrost_proto_rawDescData = protoimpl.X.CompressGZIP(file_bifrostpb_bifrost_proto_rawDescData)
	})
	return file_bifrostpb_bifrost_proto_rawDescData
}

var file_bifrostpb_bifrost_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_bifrostpb_bifrost_proto_goTypes = []interface{}{
	(*OperateRequest)(nil),  // 0: bifrostpb.OperateRequest
	(*OperateResponse)(nil), // 1: bifrostpb.OperateResponse
	(*ConfigRequest)(nil),   // 2: bifrostpb.ConfigRequest
	(*ConfigResponse)(nil),  // 3: bifrostpb.ConfigResponse
	(*Config)(nil),          // 4: bifrostpb.Config
}
var file_bifrostpb_bifrost_proto_depIdxs = []int32{
	4, // 0: bifrostpb.ConfigRequest.Req:type_name -> bifrostpb.Config
	4, // 1: bifrostpb.ConfigResponse.Ret:type_name -> bifrostpb.Config
	0, // 2: bifrostpb.BifrostService.ViewConfig:input_type -> bifrostpb.OperateRequest
	0, // 3: bifrostpb.BifrostService.GetConfig:input_type -> bifrostpb.OperateRequest
	2, // 4: bifrostpb.BifrostService.UpdateConfig:input_type -> bifrostpb.ConfigRequest
	0, // 5: bifrostpb.BifrostService.ViewStatistics:input_type -> bifrostpb.OperateRequest
	0, // 6: bifrostpb.BifrostService.Status:input_type -> bifrostpb.OperateRequest
	1, // 7: bifrostpb.BifrostService.ViewConfig:output_type -> bifrostpb.OperateResponse
	3, // 8: bifrostpb.BifrostService.GetConfig:output_type -> bifrostpb.ConfigResponse
	1, // 9: bifrostpb.BifrostService.UpdateConfig:output_type -> bifrostpb.OperateResponse
	1, // 10: bifrostpb.BifrostService.ViewStatistics:output_type -> bifrostpb.OperateResponse
	1, // 11: bifrostpb.BifrostService.Status:output_type -> bifrostpb.OperateResponse
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_bifrostpb_bifrost_proto_init() }
func file_bifrostpb_bifrost_proto_init() {
	if File_bifrostpb_bifrost_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bifrostpb_bifrost_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bifrostpb_bifrost_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bifrostpb_bifrost_proto_goTypes,
		DependencyIndexes: file_bifrostpb_bifrost_proto_depIdxs,
		MessageInfos:      file_bifrostpb_bifrost_proto_msgTypes,
	}.Build()
	File_bifrostpb_bifrost_proto = out.File
	file_bifrostpb_bifrost_proto_rawDesc = nil
	file_bifrostpb_bifrost_proto_goTypes = nil
	file_bifrostpb_bifrost_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BifrostServiceClient is the client API for BifrostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BifrostServiceClient interface {
	ViewConfig(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (BifrostService_ViewConfigClient, error)
	GetConfig(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (BifrostService_GetConfigClient, error)
	UpdateConfig(ctx context.Context, opts ...grpc.CallOption) (BifrostService_UpdateConfigClient, error)
	ViewStatistics(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (BifrostService_ViewStatisticsClient, error)
	Status(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (BifrostService_StatusClient, error)
}

type bifrostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBifrostServiceClient(cc grpc.ClientConnInterface) BifrostServiceClient {
	return &bifrostServiceClient{cc}
}

func (c *bifrostServiceClient) ViewConfig(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (BifrostService_ViewConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BifrostService_serviceDesc.Streams[0], "/bifrostpb.BifrostService/ViewConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &bifrostServiceViewConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BifrostService_ViewConfigClient interface {
	Recv() (*OperateResponse, error)
	grpc.ClientStream
}

type bifrostServiceViewConfigClient struct {
	grpc.ClientStream
}

func (x *bifrostServiceViewConfigClient) Recv() (*OperateResponse, error) {
	m := new(OperateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bifrostServiceClient) GetConfig(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (BifrostService_GetConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BifrostService_serviceDesc.Streams[1], "/bifrostpb.BifrostService/GetConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &bifrostServiceGetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BifrostService_GetConfigClient interface {
	Recv() (*ConfigResponse, error)
	grpc.ClientStream
}

type bifrostServiceGetConfigClient struct {
	grpc.ClientStream
}

func (x *bifrostServiceGetConfigClient) Recv() (*ConfigResponse, error) {
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bifrostServiceClient) UpdateConfig(ctx context.Context, opts ...grpc.CallOption) (BifrostService_UpdateConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BifrostService_serviceDesc.Streams[2], "/bifrostpb.BifrostService/UpdateConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &bifrostServiceUpdateConfigClient{stream}
	return x, nil
}

type BifrostService_UpdateConfigClient interface {
	Send(*ConfigRequest) error
	CloseAndRecv() (*OperateResponse, error)
	grpc.ClientStream
}

type bifrostServiceUpdateConfigClient struct {
	grpc.ClientStream
}

func (x *bifrostServiceUpdateConfigClient) Send(m *ConfigRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bifrostServiceUpdateConfigClient) CloseAndRecv() (*OperateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OperateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bifrostServiceClient) ViewStatistics(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (BifrostService_ViewStatisticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BifrostService_serviceDesc.Streams[3], "/bifrostpb.BifrostService/ViewStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &bifrostServiceViewStatisticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BifrostService_ViewStatisticsClient interface {
	Recv() (*OperateResponse, error)
	grpc.ClientStream
}

type bifrostServiceViewStatisticsClient struct {
	grpc.ClientStream
}

func (x *bifrostServiceViewStatisticsClient) Recv() (*OperateResponse, error) {
	m := new(OperateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bifrostServiceClient) Status(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (BifrostService_StatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BifrostService_serviceDesc.Streams[4], "/bifrostpb.BifrostService/Status", opts...)
	if err != nil {
		return nil, err
	}
	x := &bifrostServiceStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BifrostService_StatusClient interface {
	Recv() (*OperateResponse, error)
	grpc.ClientStream
}

type bifrostServiceStatusClient struct {
	grpc.ClientStream
}

func (x *bifrostServiceStatusClient) Recv() (*OperateResponse, error) {
	m := new(OperateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BifrostServiceServer is the server API for BifrostService service.
type BifrostServiceServer interface {
	ViewConfig(*OperateRequest, BifrostService_ViewConfigServer) error
	GetConfig(*OperateRequest, BifrostService_GetConfigServer) error
	UpdateConfig(BifrostService_UpdateConfigServer) error
	ViewStatistics(*OperateRequest, BifrostService_ViewStatisticsServer) error
	Status(*OperateRequest, BifrostService_StatusServer) error
}

// UnimplementedBifrostServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBifrostServiceServer struct {
}

func (*UnimplementedBifrostServiceServer) ViewConfig(*OperateRequest, BifrostService_ViewConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method ViewConfig not implemented")
}
func (*UnimplementedBifrostServiceServer) GetConfig(*OperateRequest, BifrostService_GetConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedBifrostServiceServer) UpdateConfig(BifrostService_UpdateConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (*UnimplementedBifrostServiceServer) ViewStatistics(*OperateRequest, BifrostService_ViewStatisticsServer) error {
	return status.Errorf(codes.Unimplemented, "method ViewStatistics not implemented")
}
func (*UnimplementedBifrostServiceServer) Status(*OperateRequest, BifrostService_StatusServer) error {
	return status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterBifrostServiceServer(s *grpc.Server, srv BifrostServiceServer) {
	s.RegisterService(&_BifrostService_serviceDesc, srv)
}

func _BifrostService_ViewConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BifrostServiceServer).ViewConfig(m, &bifrostServiceViewConfigServer{stream})
}

type BifrostService_ViewConfigServer interface {
	Send(*OperateResponse) error
	grpc.ServerStream
}

type bifrostServiceViewConfigServer struct {
	grpc.ServerStream
}

func (x *bifrostServiceViewConfigServer) Send(m *OperateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BifrostService_GetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BifrostServiceServer).GetConfig(m, &bifrostServiceGetConfigServer{stream})
}

type BifrostService_GetConfigServer interface {
	Send(*ConfigResponse) error
	grpc.ServerStream
}

type bifrostServiceGetConfigServer struct {
	grpc.ServerStream
}

func (x *bifrostServiceGetConfigServer) Send(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BifrostService_UpdateConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BifrostServiceServer).UpdateConfig(&bifrostServiceUpdateConfigServer{stream})
}

type BifrostService_UpdateConfigServer interface {
	SendAndClose(*OperateResponse) error
	Recv() (*ConfigRequest, error)
	grpc.ServerStream
}

type bifrostServiceUpdateConfigServer struct {
	grpc.ServerStream
}

func (x *bifrostServiceUpdateConfigServer) SendAndClose(m *OperateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bifrostServiceUpdateConfigServer) Recv() (*ConfigRequest, error) {
	m := new(ConfigRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BifrostService_ViewStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BifrostServiceServer).ViewStatistics(m, &bifrostServiceViewStatisticsServer{stream})
}

type BifrostService_ViewStatisticsServer interface {
	Send(*OperateResponse) error
	grpc.ServerStream
}

type bifrostServiceViewStatisticsServer struct {
	grpc.ServerStream
}

func (x *bifrostServiceViewStatisticsServer) Send(m *OperateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BifrostService_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BifrostServiceServer).Status(m, &bifrostServiceStatusServer{stream})
}

type BifrostService_StatusServer interface {
	Send(*OperateResponse) error
	grpc.ServerStream
}

type bifrostServiceStatusServer struct {
	grpc.ServerStream
}

func (x *bifrostServiceStatusServer) Send(m *OperateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _BifrostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bifrostpb.BifrostService",
	HandlerType: (*BifrostServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ViewConfig",
			Handler:       _BifrostService_ViewConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetConfig",
			Handler:       _BifrostService_GetConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateConfig",
			Handler:       _BifrostService_UpdateConfig_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ViewStatistics",
			Handler:       _BifrostService_ViewStatistics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Status",
			Handler:       _BifrostService_Status_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bifrostpb/bifrost.proto",
}
