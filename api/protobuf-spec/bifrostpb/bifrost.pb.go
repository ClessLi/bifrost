// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: bifrostpb/bifrost.proto

package bifrostpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Unexpired bool   `protobuf:"varint,3,opt,name=Unexpired,proto3" json:"Unexpired,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{0}
}

func (x *AuthRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthRequest) GetUnexpired() bool {
	if x != nil {
		return x.Unexpired
	}
	return false
}

type AuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Err   string `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{1}
}

func (x *AuthResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AuthResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type OperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=Location,proto3" json:"Location,omitempty"`
}

func (x *OperateRequest) Reset() {
	*x = OperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateRequest) ProtoMessage() {}

func (x *OperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateRequest.ProtoReflect.Descriptor instead.
func (*OperateRequest) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{2}
}

func (x *OperateRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OperateRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type OperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret []byte `protobuf:"bytes,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *OperateResponse) Reset() {
	*x = OperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateResponse) ProtoMessage() {}

func (x *OperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateResponse.ProtoReflect.Descriptor instead.
func (*OperateResponse) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{3}
}

func (x *OperateResponse) GetRet() []byte {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *OperateResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string  `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Location string  `protobuf:"bytes,2,opt,name=Location,proto3" json:"Location,omitempty"`
	Req      *Config `protobuf:"bytes,3,opt,name=Req,proto3" json:"Req,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfigRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ConfigRequest) GetReq() *Config {
	if x != nil {
		return x.Req
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *Config `protobuf:"bytes,1,opt,name=Ret,proto3" json:"Ret,omitempty"`
	Err string  `protobuf:"bytes,3,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigResponse) GetRet() *Config {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *ConfigResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	JData []byte `protobuf:"bytes,2,opt,name=JData,proto3" json:"JData,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bifrostpb_bifrost_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_bifrostpb_bifrost_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_bifrostpb_bifrost_proto_rawDescGZIP(), []int{6}
}

func (x *Config) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Config) GetJData() []byte {
	if x != nil {
		return x.JData
	}
	return nil
}

var File_bifrostpb_bifrost_proto protoreflect.FileDescriptor

var file_bifrostpb_bifrost_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x62, 0x69, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x69, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x70, 0x62, 0x22, 0x63, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x6e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x55, 0x6e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x0c, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72,
	0x72, 0x22, 0x42, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x22, 0x66, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x52, 0x65, 0x71, 0x22, 0x47, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x52, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x52, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x22, 0x32, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4a,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x4a, 0x44, 0x61, 0x74,
	0x61, 0x32, 0x49, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x62, 0x69, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xfe, 0x02, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x19, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x69, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x48, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x69,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x2e,
	0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x2e, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x1d, 0x5a,
	0x1b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70,
	0x65, 0x63, 0x2f, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bifrostpb_bifrost_proto_rawDescOnce sync.Once
	file_bifrostpb_bifrost_proto_rawDescData = file_bifrostpb_bifrost_proto_rawDesc
)

func file_bifrostpb_bifrost_proto_rawDescGZIP() []byte {
	file_bifrostpb_bifrost_proto_rawDescOnce.Do(func() {
		file_bifrostpb_bifrost_proto_rawDescData = protoimpl.X.CompressGZIP(file_bifrostpb_bifrost_proto_rawDescData)
	})
	return file_bifrostpb_bifrost_proto_rawDescData
}

var file_bifrostpb_bifrost_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_bifrostpb_bifrost_proto_goTypes = []interface{}{
	(*AuthRequest)(nil),     // 0: bifrostpb.AuthRequest
	(*AuthResponse)(nil),    // 1: bifrostpb.AuthResponse
	(*OperateRequest)(nil),  // 2: bifrostpb.OperateRequest
	(*OperateResponse)(nil), // 3: bifrostpb.OperateResponse
	(*ConfigRequest)(nil),   // 4: bifrostpb.ConfigRequest
	(*ConfigResponse)(nil),  // 5: bifrostpb.ConfigResponse
	(*Config)(nil),          // 6: bifrostpb.Config
}
var file_bifrostpb_bifrost_proto_depIdxs = []int32{
	6, // 0: bifrostpb.ConfigRequest.Req:type_name -> bifrostpb.Config
	6, // 1: bifrostpb.ConfigResponse.Ret:type_name -> bifrostpb.Config
	0, // 2: bifrostpb.AuthService.Login:input_type -> bifrostpb.AuthRequest
	2, // 3: bifrostpb.OperationService.ViewConfig:input_type -> bifrostpb.OperateRequest
	2, // 4: bifrostpb.OperationService.GetConfig:input_type -> bifrostpb.OperateRequest
	4, // 5: bifrostpb.OperationService.UpdateConfig:input_type -> bifrostpb.ConfigRequest
	2, // 6: bifrostpb.OperationService.ViewStatistics:input_type -> bifrostpb.OperateRequest
	2, // 7: bifrostpb.OperationService.Status:input_type -> bifrostpb.OperateRequest
	1, // 8: bifrostpb.AuthService.Login:output_type -> bifrostpb.AuthResponse
	3, // 9: bifrostpb.OperationService.ViewConfig:output_type -> bifrostpb.OperateResponse
	5, // 10: bifrostpb.OperationService.GetConfig:output_type -> bifrostpb.ConfigResponse
	3, // 11: bifrostpb.OperationService.UpdateConfig:output_type -> bifrostpb.OperateResponse
	3, // 12: bifrostpb.OperationService.ViewStatistics:output_type -> bifrostpb.OperateResponse
	3, // 13: bifrostpb.OperationService.Status:output_type -> bifrostpb.OperateResponse
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_bifrostpb_bifrost_proto_init() }
func file_bifrostpb_bifrost_proto_init() {
	if File_bifrostpb_bifrost_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bifrostpb_bifrost_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bifrostpb_bifrost_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bifrostpb_bifrost_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_bifrostpb_bifrost_proto_goTypes,
		DependencyIndexes: file_bifrostpb_bifrost_proto_depIdxs,
		MessageInfos:      file_bifrostpb_bifrost_proto_msgTypes,
	}.Build()
	File_bifrostpb_bifrost_proto = out.File
	file_bifrostpb_bifrost_proto_rawDesc = nil
	file_bifrostpb_bifrost_proto_goTypes = nil
	file_bifrostpb_bifrost_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/bifrostpb.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) Login(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bifrostpb.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bifrostpb.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bifrostpb/bifrost.proto",
}

// OperationServiceClient is the client API for OperationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperationServiceClient interface {
	ViewConfig(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (OperationService_ViewConfigClient, error)
	GetConfig(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (OperationService_GetConfigClient, error)
	UpdateConfig(ctx context.Context, opts ...grpc.CallOption) (OperationService_UpdateConfigClient, error)
	ViewStatistics(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (OperationService_ViewStatisticsClient, error)
	Status(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (OperationService_StatusClient, error)
}

type operationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationServiceClient(cc grpc.ClientConnInterface) OperationServiceClient {
	return &operationServiceClient{cc}
}

func (c *operationServiceClient) ViewConfig(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (OperationService_ViewConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[0], "/bifrostpb.OperationService/ViewConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceViewConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperationService_ViewConfigClient interface {
	Recv() (*OperateResponse, error)
	grpc.ClientStream
}

type operationServiceViewConfigClient struct {
	grpc.ClientStream
}

func (x *operationServiceViewConfigClient) Recv() (*OperateResponse, error) {
	m := new(OperateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationServiceClient) GetConfig(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (OperationService_GetConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[1], "/bifrostpb.OperationService/GetConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceGetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperationService_GetConfigClient interface {
	Recv() (*ConfigResponse, error)
	grpc.ClientStream
}

type operationServiceGetConfigClient struct {
	grpc.ClientStream
}

func (x *operationServiceGetConfigClient) Recv() (*ConfigResponse, error) {
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationServiceClient) UpdateConfig(ctx context.Context, opts ...grpc.CallOption) (OperationService_UpdateConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[2], "/bifrostpb.OperationService/UpdateConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceUpdateConfigClient{stream}
	return x, nil
}

type OperationService_UpdateConfigClient interface {
	Send(*ConfigRequest) error
	CloseAndRecv() (*OperateResponse, error)
	grpc.ClientStream
}

type operationServiceUpdateConfigClient struct {
	grpc.ClientStream
}

func (x *operationServiceUpdateConfigClient) Send(m *ConfigRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationServiceUpdateConfigClient) CloseAndRecv() (*OperateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OperateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationServiceClient) ViewStatistics(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (OperationService_ViewStatisticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[3], "/bifrostpb.OperationService/ViewStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceViewStatisticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperationService_ViewStatisticsClient interface {
	Recv() (*OperateResponse, error)
	grpc.ClientStream
}

type operationServiceViewStatisticsClient struct {
	grpc.ClientStream
}

func (x *operationServiceViewStatisticsClient) Recv() (*OperateResponse, error) {
	m := new(OperateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationServiceClient) Status(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (OperationService_StatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperationService_serviceDesc.Streams[4], "/bifrostpb.OperationService/Status", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationServiceStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperationService_StatusClient interface {
	Recv() (*OperateResponse, error)
	grpc.ClientStream
}

type operationServiceStatusClient struct {
	grpc.ClientStream
}

func (x *operationServiceStatusClient) Recv() (*OperateResponse, error) {
	m := new(OperateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OperationServiceServer is the server API for OperationService service.
type OperationServiceServer interface {
	ViewConfig(*OperateRequest, OperationService_ViewConfigServer) error
	GetConfig(*OperateRequest, OperationService_GetConfigServer) error
	UpdateConfig(OperationService_UpdateConfigServer) error
	ViewStatistics(*OperateRequest, OperationService_ViewStatisticsServer) error
	Status(*OperateRequest, OperationService_StatusServer) error
}

// UnimplementedOperationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOperationServiceServer struct {
}

func (*UnimplementedOperationServiceServer) ViewConfig(*OperateRequest, OperationService_ViewConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method ViewConfig not implemented")
}
func (*UnimplementedOperationServiceServer) GetConfig(*OperateRequest, OperationService_GetConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedOperationServiceServer) UpdateConfig(OperationService_UpdateConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (*UnimplementedOperationServiceServer) ViewStatistics(*OperateRequest, OperationService_ViewStatisticsServer) error {
	return status.Errorf(codes.Unimplemented, "method ViewStatistics not implemented")
}
func (*UnimplementedOperationServiceServer) Status(*OperateRequest, OperationService_StatusServer) error {
	return status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterOperationServiceServer(s *grpc.Server, srv OperationServiceServer) {
	s.RegisterService(&_OperationService_serviceDesc, srv)
}

func _OperationService_ViewConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperationServiceServer).ViewConfig(m, &operationServiceViewConfigServer{stream})
}

type OperationService_ViewConfigServer interface {
	Send(*OperateResponse) error
	grpc.ServerStream
}

type operationServiceViewConfigServer struct {
	grpc.ServerStream
}

func (x *operationServiceViewConfigServer) Send(m *OperateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OperationService_GetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperationServiceServer).GetConfig(m, &operationServiceGetConfigServer{stream})
}

type OperationService_GetConfigServer interface {
	Send(*ConfigResponse) error
	grpc.ServerStream
}

type operationServiceGetConfigServer struct {
	grpc.ServerStream
}

func (x *operationServiceGetConfigServer) Send(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OperationService_UpdateConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationServiceServer).UpdateConfig(&operationServiceUpdateConfigServer{stream})
}

type OperationService_UpdateConfigServer interface {
	SendAndClose(*OperateResponse) error
	Recv() (*ConfigRequest, error)
	grpc.ServerStream
}

type operationServiceUpdateConfigServer struct {
	grpc.ServerStream
}

func (x *operationServiceUpdateConfigServer) SendAndClose(m *OperateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationServiceUpdateConfigServer) Recv() (*ConfigRequest, error) {
	m := new(ConfigRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OperationService_ViewStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperationServiceServer).ViewStatistics(m, &operationServiceViewStatisticsServer{stream})
}

type OperationService_ViewStatisticsServer interface {
	Send(*OperateResponse) error
	grpc.ServerStream
}

type operationServiceViewStatisticsServer struct {
	grpc.ServerStream
}

func (x *operationServiceViewStatisticsServer) Send(m *OperateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OperationService_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperationServiceServer).Status(m, &operationServiceStatusServer{stream})
}

type OperationService_StatusServer interface {
	Send(*OperateResponse) error
	grpc.ServerStream
}

type operationServiceStatusServer struct {
	grpc.ServerStream
}

func (x *operationServiceStatusServer) Send(m *OperateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _OperationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bifrostpb.OperationService",
	HandlerType: (*OperationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ViewConfig",
			Handler:       _OperationService_ViewConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetConfig",
			Handler:       _OperationService_GetConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateConfig",
			Handler:       _OperationService_UpdateConfig_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ViewStatistics",
			Handler:       _OperationService_ViewStatistics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Status",
			Handler:       _OperationService_Status_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bifrostpb/bifrost.proto",
}
